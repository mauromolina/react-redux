{"ast":null,"code":"import { ADD_PRODUCT, SUCCESFULL_ADD_PRODUCT, FAILED_ADD_PRODUCT, START_PRODUCTS_DOWNLOAD, SUCCESFULL_PRODUCTS_DOWNLOAD, FAILED_PRODUCTS_DOWNLOAD } from '../types';\nimport axiosClient from '../config/axios';\nimport swal from 'sweetalert2'; // Crear nuevos productos\n\nexport function newProductAction(product) {\n  return async dispatch => {\n    dispatch(addProduct());\n\n    try {\n      // insertar en la api\n      await axiosClient.post('/productoss', product); // si todo sale bien\n\n      dispatch(succesfullAddProduct(product));\n      swal.fire('Correcto!', 'El producto se agregó correctamente!', 'success');\n    } catch (error) {\n      console.log(error);\n      dispatch(failedAddProduct(true));\n      swal.fire({\n        icon: 'error',\n        title: 'Hubo un error',\n        text: 'Ocurrió un error! Intente de nuevo más tarde...'\n      });\n    }\n  };\n} // Agregar un producto\n\nconst addProduct = () => ({\n  type: ADD_PRODUCT\n}); // Se guarda bien el producto\n\n\nconst succesfullAddProduct = product => ({\n  type: SUCCESFULL_ADD_PRODUCT,\n  payload: product\n}); // No se guarda bien\n\n\nconst failedAddProduct = status => ({\n  type: FAILED_ADD_PRODUCT,\n  payload: status\n}); // Funcion para obtener los productos\n\n\nexport function getProductsAction() {\n  return async dispatch => {\n    dispatch(getProducts());\n  };\n}\n\nconst getProducts = () => ({\n  type: START_PRODUCTS_DOWNLOAD,\n  payload: true\n});","map":{"version":3,"sources":["/home/mauro/Escritorio/React/react-redux/src/actions/actionsProducts.js"],"names":["ADD_PRODUCT","SUCCESFULL_ADD_PRODUCT","FAILED_ADD_PRODUCT","START_PRODUCTS_DOWNLOAD","SUCCESFULL_PRODUCTS_DOWNLOAD","FAILED_PRODUCTS_DOWNLOAD","axiosClient","swal","newProductAction","product","dispatch","addProduct","post","succesfullAddProduct","fire","error","console","log","failedAddProduct","icon","title","text","type","payload","status","getProductsAction","getProducts"],"mappings":"AAAA,SACIA,WADJ,EAEIC,sBAFJ,EAGIC,kBAHJ,EAIIC,uBAJJ,EAKIC,4BALJ,EAMIC,wBANJ,QAOO,UAPP;AASA,OAAOC,WAAP,MAAwB,iBAAxB;AACA,OAAOC,IAAP,MAAiB,aAAjB,C,CAEA;;AACA,OAAO,SAASC,gBAAT,CAA0BC,OAA1B,EAAmC;AACtC,SAAO,MAAOC,QAAP,IAAoB;AACvBA,IAAAA,QAAQ,CAACC,UAAU,EAAX,CAAR;;AACA,QAAI;AACA;AACA,YAAML,WAAW,CAACM,IAAZ,CAAiB,aAAjB,EAAgCH,OAAhC,CAAN,CAFA,CAGA;;AACAC,MAAAA,QAAQ,CAACG,oBAAoB,CAACJ,OAAD,CAArB,CAAR;AACAF,MAAAA,IAAI,CAACO,IAAL,CACI,WADJ,EAEI,sCAFJ,EAGI,SAHJ;AAKH,KAVD,CAUE,OAAOC,KAAP,EAAc;AACZC,MAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACAL,MAAAA,QAAQ,CAACQ,gBAAgB,CAAC,IAAD,CAAjB,CAAR;AACAX,MAAAA,IAAI,CAACO,IAAL,CAAU;AACNK,QAAAA,IAAI,EAAE,OADA;AAENC,QAAAA,KAAK,EAAE,eAFD;AAGNC,QAAAA,IAAI,EAAE;AAHA,OAAV;AAKH;AACJ,GArBD;AAsBH,C,CAGD;;AACA,MAAMV,UAAU,GAAG,OAAO;AACtBW,EAAAA,IAAI,EAAEtB;AADgB,CAAP,CAAnB,C,CAIA;;;AACA,MAAMa,oBAAoB,GAAGJ,OAAO,KAAK;AACrCa,EAAAA,IAAI,EAACrB,sBADgC;AAErCsB,EAAAA,OAAO,EAAEd;AAF4B,CAAL,CAApC,C,CAKA;;;AACA,MAAMS,gBAAgB,GAAGM,MAAM,KAAK;AAChCF,EAAAA,IAAI,EAAEpB,kBAD0B;AAEhCqB,EAAAA,OAAO,EAAEC;AAFuB,CAAL,CAA/B,C,CAKA;;;AACA,OAAO,SAASC,iBAAT,GAA6B;AAChC,SAAO,MAAOf,QAAP,IAAoB;AACvBA,IAAAA,QAAQ,CAACgB,WAAW,EAAZ,CAAR;AACH,GAFD;AAGH;;AAED,MAAMA,WAAW,GAAG,OAAO;AACvBJ,EAAAA,IAAI,EAAEnB,uBADiB;AAEvBoB,EAAAA,OAAO,EAAE;AAFc,CAAP,CAApB","sourcesContent":["import {\n    ADD_PRODUCT,\n    SUCCESFULL_ADD_PRODUCT,\n    FAILED_ADD_PRODUCT,\n    START_PRODUCTS_DOWNLOAD,\n    SUCCESFULL_PRODUCTS_DOWNLOAD,\n    FAILED_PRODUCTS_DOWNLOAD\n} from '../types';\n\nimport axiosClient from '../config/axios';\nimport swal from 'sweetalert2';\n\n// Crear nuevos productos\nexport function newProductAction(product) {\n    return async (dispatch) => {\n        dispatch(addProduct());\n        try {\n            // insertar en la api\n            await axiosClient.post('/productoss', product);\n            // si todo sale bien\n            dispatch(succesfullAddProduct(product));\n            swal.fire(\n                'Correcto!',\n                'El producto se agregó correctamente!',\n                'success'\n            )\n        } catch (error) {\n            console.log(error);\n            dispatch(failedAddProduct(true));\n            swal.fire({\n                icon: 'error',\n                title: 'Hubo un error',\n                text: 'Ocurrió un error! Intente de nuevo más tarde...'\n            })\n        }\n    }\n}\n\n\n// Agregar un producto\nconst addProduct = () => ({\n    type: ADD_PRODUCT\n})\n\n// Se guarda bien el producto\nconst succesfullAddProduct = product => ({\n    type:SUCCESFULL_ADD_PRODUCT,\n    payload: product\n})\n\n// No se guarda bien\nconst failedAddProduct = status => ({\n    type: FAILED_ADD_PRODUCT,\n    payload: status\n})\n\n// Funcion para obtener los productos\nexport function getProductsAction() {\n    return async (dispatch) => {\n        dispatch(getProducts());\n    }\n}\n\nconst getProducts = () => ({\n    type: START_PRODUCTS_DOWNLOAD,\n    payload: true\n}) "]},"metadata":{},"sourceType":"module"}