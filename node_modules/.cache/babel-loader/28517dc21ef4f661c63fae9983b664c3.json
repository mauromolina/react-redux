{"ast":null,"code":"import { ADD_PRODUCT, SUCCESSFULL_ADD_PRODUCT, FAILED_ADD_PRODUCT, START_PRODUCTS_DOWNLOAD, SUCCESSFULL_PRODUCTS_DOWNLOAD, FAILED_PRODUCTS_DOWNLOAD, GET_DELETE_PRODUCT, FAILED_DELETE_PRODUCT, SUCCESSFULL_DELETE_PRODUCT } from '../types';\nimport axiosClient from '../config/axios';\nimport swal from 'sweetalert2'; // Crear nuevos productos\n\nexport function newProductAction(product) {\n  return async dispatch => {\n    dispatch(addProduct());\n\n    try {\n      // insertar en la api\n      await axiosClient.post('/productos', product); // si todo sale bien\n\n      dispatch(successfullAddProduct(product));\n      swal.fire('Correcto!', 'El producto se agregó correctamente!', 'success');\n    } catch (error) {\n      console.log(error);\n      dispatch(failedAddProduct(true));\n      swal.fire({\n        icon: 'error',\n        title: 'Hubo un error',\n        text: 'Ocurrió un error! Intente de nuevo más tarde...'\n      });\n    }\n  };\n} // Agregar un producto\n\nconst addProduct = () => ({\n  type: ADD_PRODUCT,\n  payload: true\n}); // Se guarda bien el producto\n\n\nconst successfullAddProduct = product => ({\n  type: SUCCESSFULL_ADD_PRODUCT,\n  payload: product\n}); // No se guarda bien\n\n\nconst failedAddProduct = status => ({\n  type: FAILED_ADD_PRODUCT,\n  payload: status\n}); // Funcion para obtener los productos\n\n\nexport function getProductsAction() {\n  return async dispatch => {\n    dispatch(getProducts());\n\n    try {\n      const response = await axiosClient.get('/productos');\n      dispatch(successfullGetProducts(response.data));\n    } catch (error) {\n      console.log(error);\n      dispatch(failedGetProducts());\n    }\n  };\n}\n\nconst getProducts = () => ({\n  type: START_PRODUCTS_DOWNLOAD,\n  payload: true\n});\n\nconst successfullGetProducts = products => ({\n  type: SUCCESSFULL_PRODUCTS_DOWNLOAD,\n  payload: products\n});\n\nconst failedGetProducts = () => ({\n  type: FAILED_PRODUCTS_DOWNLOAD,\n  payload: true\n}); // Selecciona y elimina un producto\n\n\nexport function deleteProductAction(id) {\n  return async dispatch => {\n    dispatch(getDeleteProduct(id));\n\n    try {\n      await axiosClient.delete(`/productos/${id}`);\n      dispatch(successfullDeleteProduct());\n      swal.fire('Eliminado!', 'El producto se eliminó correctamente', 'success');\n    } catch (error) {\n      console.log(error);\n      dispatch(failedDeleteProduct());\n    }\n  };\n}\n\nconst getDeleteProduct = id => ({\n  type: GET_DELETE_PRODUCT,\n  payload: id\n});\n\nconst successfullDeleteProduct = () => ({\n  type: SUCCESSFULL_DELETE_PRODUCT\n});\n\nconst failedDeleteProduct = () => ({\n  type: FAILED_DELETE_PRODUCT,\n  payload: true\n});","map":{"version":3,"sources":["/home/mauro/Escritorio/React/react-redux/src/actions/actionsProducts.js"],"names":["ADD_PRODUCT","SUCCESSFULL_ADD_PRODUCT","FAILED_ADD_PRODUCT","START_PRODUCTS_DOWNLOAD","SUCCESSFULL_PRODUCTS_DOWNLOAD","FAILED_PRODUCTS_DOWNLOAD","GET_DELETE_PRODUCT","FAILED_DELETE_PRODUCT","SUCCESSFULL_DELETE_PRODUCT","axiosClient","swal","newProductAction","product","dispatch","addProduct","post","successfullAddProduct","fire","error","console","log","failedAddProduct","icon","title","text","type","payload","status","getProductsAction","getProducts","response","get","successfullGetProducts","data","failedGetProducts","products","deleteProductAction","id","getDeleteProduct","delete","successfullDeleteProduct","failedDeleteProduct"],"mappings":"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","sourcesContent":["import {\n    ADD_PRODUCT,\n    SUCCESSFULL_ADD_PRODUCT,\n    FAILED_ADD_PRODUCT,\n    START_PRODUCTS_DOWNLOAD,\n    SUCCESSFULL_PRODUCTS_DOWNLOAD,\n    FAILED_PRODUCTS_DOWNLOAD,\n    GET_DELETE_PRODUCT,\n    FAILED_DELETE_PRODUCT,\n    SUCCESSFULL_DELETE_PRODUCT\n} from '../types';\n\nimport axiosClient from '../config/axios';\nimport swal from 'sweetalert2';\n\n// Crear nuevos productos\nexport function newProductAction(product) {\n    return async (dispatch) => {\n        dispatch(addProduct());\n        try {\n            // insertar en la api\n            await axiosClient.post('/productos', product);\n            // si todo sale bien\n            dispatch(successfullAddProduct(product));\n            swal.fire(\n                'Correcto!',\n                'El producto se agregó correctamente!',\n                'success'\n            )\n        } catch (error) {\n            console.log(error);\n            dispatch(failedAddProduct(true));\n            swal.fire({\n                icon: 'error',\n                title: 'Hubo un error',\n                text: 'Ocurrió un error! Intente de nuevo más tarde...'\n            })\n        }\n    }\n}\n\n\n// Agregar un producto\nconst addProduct = () => ({\n    type: ADD_PRODUCT,\n    payload: true\n})\n\n// Se guarda bien el producto\nconst successfullAddProduct = product => ({\n    type:SUCCESSFULL_ADD_PRODUCT,\n    payload: product\n})\n\n// No se guarda bien\nconst failedAddProduct = status => ({\n    type: FAILED_ADD_PRODUCT,\n    payload: status\n})\n\n// Funcion para obtener los productos\nexport function getProductsAction() {\n    return async (dispatch) => {\n        dispatch(getProducts());\n        try {\n            const response = await axiosClient.get('/productos');\n            dispatch(successfullGetProducts(response.data));\n        } catch (error) {\n            console.log(error);\n            dispatch(failedGetProducts());\n        }\n    }\n}\n\nconst getProducts = () => ({\n    type: START_PRODUCTS_DOWNLOAD,\n    payload: true\n}) \n\nconst successfullGetProducts = products => ({\n    type: SUCCESSFULL_PRODUCTS_DOWNLOAD,\n    payload: products\n    \n})\n\nconst failedGetProducts = () => ({\n    type: FAILED_PRODUCTS_DOWNLOAD,\n    payload: true\n})\n\n// Selecciona y elimina un producto\nexport function deleteProductAction(id) {\n    return async (dispatch) => {\n        dispatch(getDeleteProduct(id));\n        try {\n            await axiosClient.delete(`/productos/${id}`);\n            dispatch(successfullDeleteProduct());\n            swal.fire(\n                'Eliminado!',\n                'El producto se eliminó correctamente',\n                'success'\n            )\n        } catch (error) {\n            console.log(error);\n            dispatch(failedDeleteProduct());\n        }\n\n    }\n}\n\nconst getDeleteProduct = id => ({\n    type:GET_DELETE_PRODUCT,\n    payload: id\n})\n\nconst successfullDeleteProduct = () => ({\n    type: SUCCESSFULL_DELETE_PRODUCT\n})\n\nconst failedDeleteProduct = () => ({\n    type: FAILED_DELETE_PRODUCT,\n    payload: true\n})"]},"metadata":{},"sourceType":"module"}